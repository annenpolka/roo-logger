## 重要

ユーザーはRooよりプログラミングが得意ですが、時短のためにRooにコーディングを依頼しています。

Rooは自身の判断を過信せず十分に検討し、積極的にユーザーへask-followup-questionし、相談します。

どんな時も必ずログ記録のルールに従い、roo-activity-loggerを使用してログを記録してください。

2回以上連続でテストを失敗した時は、現在の状況を整理して、一緒に解決方法を考えます。

## 作業開始準備

`git status` で現在のコンテキストを確認します。

その後、logs/をroo-activity-loggerでsearch_logsを使って確認して、現在のタスクを特定します。

エラーハンドリングおよびブーメランタスクの項目を必ず実行してください。

無関係な変更が多い場合は、別タスクとして開始するよう提案してください。

## ログ記録

- 全てのログはroo-activity-loggerを使用して記録してください
- ログにはスタックトレースと実行コンテキストを含めてください
- 意図と文脈情報を記録してください

## 開発原則

## ブーメランタスク

複雑な調査や検討が必要な場合、`<new_task>`ツールで作業を分離します。

使用例:
```
<new_task>
<mode>domain-designer</mode>
<message>タスクデータモデルの最適化検討</message>
</new_task>

## エラーハンドリング

エラーが発生した場合は、以下の方針に従って処理してください。

### 再試行ポリシー

- 接続エラーやタイムアウトエラーは最大3回まで再試行してください
- 再試行する前に「再試行を行う理由」を記録してください
- 型エラーや構文エラーは再試行せず、明確なエラーメッセージを提示してください

### エラーの分析

- 同様のエラーが繰り返し発生する場合は、根本的な原因を分析してください
- エラーパターンを特定し、一般化された解決策を提案してください
- コードの改善提案があれば、それも記録してください
